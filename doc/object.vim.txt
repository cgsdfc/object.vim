*object.vim.txt*
                                                     *object.vim* *object.vim*

==============================================================================
CONTENTS                                                 *object.vim-contents*
  1. Introduction...........................................|object.vim-intro|
  2. Functions..........................................|object.vim-functions|
  3. Exceptions........................................|object.vim-exceptions|

==============================================================================
INTRODUCTION                                                *object.vim-intro*

A vimscript library that provides object protocols for Vim similar to Python.


==============================================================================
FUNCTIONS                                               *object.vim-functions*

object#class#class({name}, [bases])                     *object#class#class()*
  Define a class that has a name and optional base class(es).
>
    let Widget = object#class('Widget')
    let Widget = object#class('Widget', [...])
<
  [bases] should be a |Dict| or a |List| of |Dict| that was defined by
  |class()|. {name} should be a |String| of valid identifier in Vim
  ([_a-zA-Z][_a-zA-Z0-9]*). The return value is special |Dict| to which
  methods can be added to and from which instance can be created by
  |object#new()|. Methods can be added by:
>
    function! Widget.say_yes()
    let Widget.say_yes = function('widget#say_yes')
<

  Inheritance is possible. The methods of base classes are added from left to
  right across the [bases] when |class()| is called. The methods defined for
  this class effectively override those from bases.


object#class#new({cls}, [args])                           *object#class#new()*
  Create a new instance of {cls} by applying optional [args].


object#class#type({obj})                                 *object#class#type()*
  Return the class of {obj}.


object#class#super({cls}, {obj}, {method})              *object#class#super()*
  Return a partial |Funcref| that binds the dict of {method} of the base class
  {cls} of {obj} to {obj} Examples:
>
    call object#super(Base, self, '__init__')(...)
<


object#class#isinstance({obj}, {cls})              *object#class#isinstance()*
  Return whether {obj} is an instance of {cls}.


object#class#issubclass({cls}, {base})             *object#class#issubclass()*
  Return wheter {cls} is a subclass of {base}.


object#mapping#hash({obj})                             *object#mapping#hash()*
  Return the hash value of {obj}. {obj} can be a |Number|, a |String| or
  special variables like |v:none| and |v:false|, or an object with __hash__()
  defined.

  Throws ERROR(TypeError) if {obj} is a |List|, |Float| or |Dict|.
  Throws ERROR(WrongType) if __hash__ is not a |Funcref| or returns
  something NAN (Not A Number).


object#mapping#getitem({obj}, {key})                *object#mapping#getitem()*
  Return the value at {key} in {obj} as if {obj} is a mapping. If {obj} is a
  |List| or |Dict|, operator[] of Vim will be used.

object#mapping#setitem({key}, {obj}, {value})       *object#mapping#setitem()*
  Set the value at {key} of {obj} to {value}. If {obj} is a |List| or |Dict|,
  let {obj}[{key}] = {value} will be used. Otherwise, __setitem__() of {obj}
  will be used.

object#protocols#getattr({obj}, {name})           *object#protocols#getattr()*
  Get the attribute {name} from {obj}. Note: The __getattr__() hook overrides
  the dictionary lookup completely. That means it is not consulted after
  dictionary lookup failed but used directly if there is a usable one.


object#protocols#setattr({obj}, {name}, {val})    *object#protocols#setattr()*
  setattr(obj, name, val) Set the {name} attribute of {obj} to {val}.

  Set attribute {name} to {val} for {obj}

object#protocols#hasattr({obj}, {name})           *object#protocols#hasattr()*
  hasattr(obj, name) Return whether {obj} has attribute {name}.

  Test whether {obj} has attribute {name}. Return false if {obj} is not a
  |Dict|.

object#protocols#len({obj})                           *object#protocols#len()*
  len(obj) Return the length of {obj}. If {obj} is a |List| or a |Dict|,
  |len()| will be called. Otherwise, the __len__() of {obj} will be called.

object#protocols#dir({obj})                           *object#protocols#dir()*
  dir(obj) Return a |List| of names of all attributes from {obj}. If {obj}
  defines __dir__(), it is called instead.


object#types#object()                                  *object#types#object()*
  object() Create a plain object.

object#types#object_()                                *object#types#object_()*
  object_() Return the object class

object#types#type_()                                    *object#types#type_()*
  type_() Return the type class

==============================================================================
EXCEPTIONS                                             *object.vim-exceptions*

                                                       *ERROR(AttributeError)*


vim:tw=78:ts=8:ft=help:norl:
