" vim:ft=vim
" Test getitem()
"

Execute(getitem() works with String, List and Dict without __getitem__);
let input = [
      \ [ 'str', 0, 's' ],
      \ [ [ 1, 2, 3, ], 1, 2 ],
      \ [ { 'a': 1, 'b': 2 }, 'b', 2 ],
      \ ]
for [mapping, key, val] in input
  AssertEqual object#getitem(mapping, key), val
endfor

Execute(getitem() works with __getitem__);
let cls = { 'data': {} }
function! cls.__getitem__(key)
  return self.data[a:key]
endfunction

function! cls.add(x, val)
  let self.data[a:x] = a:val
endfunction

let input = [
      \ [ 'apple', 'red' ],
      \ [ 'banana', 'yellow' ],
      \ [ 'oringe', 'oringe' ],
      \ ]

for [key, val] in input
  call cls.add(key, val)
endfor

for [key, val] in input
  AssertEqual object#getitem(cls, key), val
endfor

Execute(getitem() throws TypeError if the type of obj doesn't support it);
let input = [
      \ '1', v:none, v:false, v:true, function('empty'),
      \ ]
for X in input
  AssertThrows call object#getitem(g:x, 0)
  Assert g:vader_exception =~# 'TypeError'
endfor

Execute(getitem() throws WrongType if __getitem__ is not Funcref);
let cls = { '__getitem__' : 1 }
AssertThrows call object#getitem(g:cls, 2)
Assert g:vader_exception =~# 'WrongType'
