" MIT License
" 
" Copyright (c) 2018 cgsdfc
" 
" Permission is hereby granted, free of charge, to any person obtaining a copy
" of this software and associated documentation files (the "Software"), to deal
" in the Software without restriction, including without limitation the rights
" to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
" copies of the Software, and to permit persons to whom the Software is
" furnished to do so, subject to the following conditions:
" 
" The above copyright notice and this permission notice shall be included in all
" copies or substantial portions of the Software.
" 
" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
" IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
" FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
" AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
" LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
" OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
" SOFTWARE.

" vim:ft=vim
"
" Test zip()
"

Execute (Works for basic cases);
let iter = object#zip(range(3), range(3))
let result = [[0,0],[1,1],[2,2]]
AssertEqual result, object#list(iter)

Execute (StopIteration at the shortest sequence);
let iter = object#zip(range(3), range(4), range(5))
let shortest = object#zip(range(3), range(3), range(3))
AssertEqual object#list(shortest), object#list(iter)

Execute (Throws TypeError as any of the arguments is non-iterable);
AssertThrows call object#zip([], 1)
Assert g:vader_exception =~# 'TypeError'

Execute (Basic Attributes);
let x = object#zip([], [])
Log object#repr(x)
Log object#repr(object#type(x))
Log object#dir(x)

Execute (Corner cases: zipping empty sequences);
let iter = object#zip([], range(3))
AssertEqual [], object#list(iter)
let iter = object#zip('', range(3))
AssertEqual [], object#list(iter)

Execute (Corner cases: single arg);
let iter = object#zip(range(3))
AssertEqual object#list(iter), range(3)
