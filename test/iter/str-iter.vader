" MIT License
" 
" Copyright (c) 2018 cgsdfc
" 
" Permission is hereby granted, free of charge, to any person obtaining a copy
" of this software and associated documentation files (the "Software"), to deal
" in the Software without restriction, including without limitation the rights
" to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
" copies of the Software, and to permit persons to whom the Software is
" furnished to do so, subject to the following conditions:
" 
" The above copyright notice and this permission notice shall be included in all
" copies or substantial portions of the Software.
" 
" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
" IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
" FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
" AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
" LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
" OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
" SOFTWARE.

" vim:ft=vim
"
" Test String Iterator

Execute (StopIteration immediately for empty String);
let iter = object#iter('')
AssertThrows call object#next(g:iter)
Assert g:vader_exception =~# 'StopIteration'

Execute (Retrieve every single character from a String);
let string = repeat('x', 10)
let iter = object#iter(string)
let [i, N] = [0, len(string)]

while i < N
  AssertEqual object#next(iter), string[i]
  let i += 1
endwhile

Execute (Throws StopIteration when exhausted);
let N = 10
let iter = object#iter(repeat('a', N))
call map(range(N), 'object#next(iter)')

AssertThrows call object#next(g:iter)
Assert g:vader_exception =~# 'StopIteration'

" Because String is fundamentally unmodifiable, let .=
" creates a new String and assign it to the variable.
" Example:
" >
"   let a = ''
"   let b = a
"   let a .= '1'
"   echo a is# b
" <
" Gives 0.
" Thus, the str_iter is unawared of the changes to the string
" that was used to initialize it.
Execute (Iterating while the underlying string is let .=);
let string = ''
let iter = object#iter(string)

let string .= 'a'
AssertThrows call object#next(g:iter)
Assert g:vader_exception =~# 'StopIteration'
