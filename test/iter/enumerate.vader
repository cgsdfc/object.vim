" MIT License
" 
" Copyright (c) 2018 cgsdfc
" 
" Permission is hereby granted, free of charge, to any person obtaining a copy
" of this software and associated documentation files (the "Software"), to deal
" in the Software without restriction, including without limitation the rights
" to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
" copies of the Software, and to permit persons to whom the Software is
" furnished to do so, subject to the following conditions:
" 
" The above copyright notice and this permission notice shall be included in all
" copies or substantial portions of the Software.
" 
" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
" IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
" FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
" AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
" LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
" OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
" SOFTWARE.

" vim:ft=vim
"
" Test enumerate().
"

Before;
let empty_seqs = [ [], '' ]
let test_seqs = [
      \ range(10),
      \ split(repeat('a ', 10)),
      \ map(range(10), 'function("tr")'),
      \ map(range(10), 'and(v:val, 1)?[]:{}'),
      \]

" A clever way to turn a List into enumerated List
" by pure VimL. Actually a less powerful version of
" enumerate() can be implemented like this but just
" works for List.
function! Enumerate_list(x)
  let x = maktaba#ensure#IsList(a:x)
  return map(range(len(x)), '[v:val, x[v:val]]')
endfunction

Execute (on empty sequence);
for x in empty_seqs
  let iter = object#enumerate(x)
  AssertThrows call object#next(g:iter)
  Assert g:vader_exception =~# 'StopIteration'
endfor

Execute (numbers each item default from 0);
AssertEqual
      \ map(copy(test_seqs), 'object#list(object#enumerate(v:val))'),
      \ map(copy(test_seqs), 'Enumerate_list(v:val)')

Execute (takes optional start);
let iter = object#enumerate('a', 1)
AssertEqual [1, 'a'], object#next(iter)

Execute (throws TypeError if more than 1 optional args given);
AssertThrows call object#enumerate('a', 1, 2)
Assert g:vader_exception =~# 'TypeError'

Execute (throws WrongType if start is NAN);
AssertThrows call object#enumerate('a', '')
Assert g:vader_exception =~# 'WrongType'
