" MIT License
" 
" Copyright (c) 2018 cgsdfc
" 
" Permission is hereby granted, free of charge, to any person obtaining a copy
" of this software and associated documentation files (the "Software"), to deal
" in the Software without restriction, including without limitation the rights
" to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
" copies of the Software, and to permit persons to whom the Software is
" furnished to do so, subject to the following conditions:
" 
" The above copyright notice and this permission notice shall be included in all
" copies or substantial portions of the Software.
" 
" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
" IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
" FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
" AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
" LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
" OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
" SOFTWARE.

" vim:ft=vim
"
" Test object#map()
"

Execute (Can do what builtin-map() can do);
let input = [
      \ [ range(10),  'string(v:val)'],
      \ [ [ 0, 1 ], '!v:val' ],
      \]
for [data, lambda] in input
  AssertEqual object#map(data, lambda), map(data, lambda)
endfor

Execute (Create new list rather than does it in place);
let data = range(10)
Assert data isnot# object#map(data, 'v:val')

Execute (Cannot deal with a directory but builtin-map() can);
" Because dictionary is _not_ iterable while map() should take iterable,
" for consistency map() won't treat dictionary as builtin-map() does.
AssertThrows call object#map({}, 'v:val')
Assert g:vader_exception =~# 'TypeError'

Execute (Can handle String);
let str = repeat('a', 10)
let x = object#map(str, 'toupper(v:val)')
AssertEqual x, map(range(10), '"A"')

