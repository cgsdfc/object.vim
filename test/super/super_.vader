" MIT License
" 
" Copyright (c) 2018 cgsdfc
" 
" Permission is hereby granted, free of charge, to any person obtaining a copy
" of this software and associated documentation files (the "Software"), to deal
" in the Software without restriction, including without limitation the rights
" to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
" copies of the Software, and to permit persons to whom the Software is
" furnished to do so, subject to the following conditions:
" 
" The above copyright notice and this permission notice shall be included in all
" copies or substantial portions of the Software.
" 
" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
" IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
" FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
" AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
" LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
" OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
" SOFTWARE.

" vim:ft=vim
" Test super_()
"

Before;
let object = object#object_()
let X = object#class('X')
let Y = object#class('Y')
let Z = object#class('Z')

let Base = object#class('Base')
let Sibling = object#class('Sibling')
let Derived = object#class('Derived', [Base, Sibling])


Execute (Forward call to direct parents and sibling);

function! Base.__init__()
  call object#super_(g:Base, self, '__init__')()
  let self.base = 1
endfunction

function! Sibling.__init__()
  call object#super_(g:Sibling, self, '__init__')()
  let self.sibling = 1
endfunction

function! Derived.__init__()
  call object#super_(g:Derived, self, '__init__')()
  let self.derived = 1
endfunction

let x = object#new(Derived)
AssertEqual [x.base, x.derived, x.sibling], [1, 1, 1]
let y = object#new(Base)
AssertEqual y.base, 1
let z = object#new(Sibling)
AssertEqual z.sibling, 1


Execute (Throws WrongType or ValueError if name is not a String or an identifier);
let y = object#new(Y)
let input = [1, range(2), '$x']

for x in input
  AssertThrows call object#super_(g:Y, g:y, g:x)
  Assert g:vader_exception =~# '\v\CWrongType|ValueError'
  Log g:vader_exception
endfor


Execute (Throws AttributeError if name cannot be found);
let X = object#class('X', Y)

function! X.__init__()
  call object#super_(g:X, self, 'non_existing')
endfunction

AssertThrows call object#new(g:X)
Assert g:vader_exception =~# 'AttributeError'
Log g:vader_exception
