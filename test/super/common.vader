" MIT License
" 
" Copyright (c) 2018 cgsdfc
" 
" Permission is hereby granted, free of charge, to any person obtaining a copy
" of this software and associated documentation files (the "Software"), to deal
" in the Software without restriction, including without limitation the rights
" to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
" copies of the Software, and to permit persons to whom the Software is
" furnished to do so, subject to the following conditions:
" 
" The above copyright notice and this permission notice shall be included in all
" copies or substantial portions of the Software.
" 
" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
" IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
" FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
" AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
" LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
" OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
" SOFTWARE.

"
" Common Behaviors
"

Before;
let object = object#object_()
let X = object#class('X')
let Y = object#class('Y')
let Z = object#class('Z')

Execute (Throws TypeError if isinstance(obj, type) is false);
function! X.__init__()
  call object#super(g:Y, self)
endfunction

function! Y.__init__()
  call object#super_(g:X, self, '__init__')
endfunction

for Cls in [X, Y]
  AssertThrows call object#new(g:Cls)
  Log g:vader_exception
  Assert g:vader_exception =~# 'TypeError'
endfor

Execute (Throws TypeError if obj is not an object);

AssertThrows call object#super_(g:Y, 1, '__init__')
Assert g:vader_exception =~# 'TypeError'
Log g:vader_exception

AssertThrows call object#super(g:Y, 1)
Assert g:vader_exception =~# 'TypeError'
Log g:vader_exception


Execute (Throws TypeError if type is not a class);
let y = object#new(Y)

AssertThrows call object#super_(1, g:y, '__init__')
Assert g:vader_exception =~# 'TypeError'
Log g:vader_exception

AssertThrows call object#super(1, g:y)
Assert g:vader_exception =~# 'TypeError'
Log g:vader_exception


Execute (Throws TypeError if there is no next class in MRO);
let o = object#object()

AssertThrows call object#super_(g:object, g:o, '__init__')
Assert g:vader_exception =~# 'TypeError'
Log g:vader_exception

AssertThrows call object#super(g:object, g:o)
Assert g:vader_exception =~# 'TypeError'
Log g:vader_exception
" End of Common Beheviors.
