" vim:ft=vim
Before;
let lipsum = maktaba#path#Join([fnamemodify(g:vader_file, ':h'), 'data', 'lipsum.txt'])
let [mode_pattern, readable, writable, private_attrs] = object#file#patterns()
let f=object#open(lipsum)
let file_ = object#file_()

"
" open()
"

Execute(open() without mode default for reading);
AssertEqual f.mode, 'r'
AssertEqual lipsum, f.name

"
" mode string
"

Execute(valid mode strings);
let valid_modes = [
      \ 'w', 'r', 'a',
      \ "w+", "r+", "a+",
      \ 'rw', 'ra', 'wa', 'wr', 'ar', 'aw',
      \ 'raw', 'rwa', 'awr', 'arw', 'war', 'wra',
      \ 'ra+', 'wr+', 'raw+',
      \ 'rkkk', 'r    +', 'www', 'w&&&+',
      \]
for x in valid_modes
  Assert x =~# mode_pattern
endfor

Execute(bad mode strings);
let bad_modes = [
      \ '+r', 'u', '@', ' r',
      \ "U+",
      \ ]
for x in bad_modes
  Assert x !~# mode_pattern
endfor

Execute(readable modes);
let positive = [ 'r', "w+", "a+", 'rw', 'ra',]
for x in positive
  Assert x =~# readable
endfor

Execute(not readable modes);
let negative = ['w', 'a', 'wa', 'aw' ]
for x in negative
  Assert x !~# readable
endfor

Execute(writable modes);
let positive = [ 'w', 'a', "r+", 'wa', 'wr',
      \ 'rw', 'r   +', 'www', "w+", "a+",
      \]
for x in positive
  Assert x =~# writable
endfor

Execute(not writable/readonly modes);
Assert 'r' !~# writable

"
" dir(file)
"

Execute(pravite attrs not showing up);
for x in object#dir(f)
  Assert x !~# private_attrs
endfor

Execute(setattr() on file obj should throw AttributeError);
AssertThrows call object#setattr(g:f, 'x', 1)
Assert g:vader_exception =~# 'AttributeError.*no attribute'
for x in object#dir(f)
  AssertThrows call object#setattr(g:f, g:x, 1)
  Assert g:vader_exception =~# 'AttributeError.*readonly'
endfor

Execute(read() returns all the lines);
let data = split(repeat('a', 10))
let temp = tempname()
call writefile(data, temp)
try
  let f = object#open(temp)
  AssertEqual f.read(), join(data, "\n")
catch
  Log v:exception
  Log 'Test failed'
finally
  call delete(temp)
endtry

Execute(a second call to f.read() should return '');
call f.read()
AssertEqual '', f.read()

Execute(f.readline() should retrieve each line without tailing NL);
let data = map(range(10), 'string(v:val)')
let temp = tempname()
call writefile(data, temp)
try
  let f = object#open(temp, 'r')
  for x in data
    AssertEqual x, f.readline()
  endfor
  AssertEqual f.readline(), ''
catch
  Log v:exception
finally
  call delete(temp)
endtry
