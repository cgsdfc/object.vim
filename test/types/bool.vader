" vim:ft=vim
"
" bool()
"

Execute(bool() works with Number, List, Dict, String, Float and special variables);
let input = [
      \ [ 0, 0], [ 1, 1 ], [ -1, 1],
      \ [v:false, 0], [v:true, 1], [v:null, 0], [v:none, 0],
      \ [ [], 0 ], [ [0], 1 ],
      \ [ {}, 0 ], [ {'a':1}, 1],
      \ [ 0.0, 0 ], [ -0.0, 0], [ 1.2, 1], [ 0.000001, 1],
      \ [ '', 0 ], [ 'a', 1 ],
      \ [ function('tr'), 1]
      \ ]
for [X, y] in input
  AssertEqual object#bool(X), y
endfor

Execute(bool() hooks into __bool__);
let cls = { 'nr' : 2 }
function! cls.__bool__()
  return self.nr > 0
endfunction

Assert object#bool(cls)
let cls.nr = 0
Assert !object#bool(cls)

Execute(bool() throws BadValue (by maktaba#ensure#IsBool()) if __bool__ returns neither 0 nor 1);
let cls = {}
function! cls.__bool__()
  return 3
endfunction
AssertThrows call object#bool(g:cls)
Assert g:vader_exception =~# 'BadValue'

Execute(bool()'s dealing with Funcref);
call object#bool(function('tr'))
