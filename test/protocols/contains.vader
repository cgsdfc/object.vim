" MIT License
" 
" Copyright (c) 2018 cgsdfc
" 
" Permission is hereby granted, free of charge, to any person obtaining a copy
" of this software and associated documentation files (the "Software"), to deal
" in the Software without restriction, including without limitation the rights
" to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
" copies of the Software, and to permit persons to whom the Software is
" furnished to do so, subject to the following conditions:
" 
" The above copyright notice and this permission notice shall be included in all
" copies or substantial portions of the Software.
" 
" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
" IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
" FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
" AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
" LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
" OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
" SOFTWARE.

" vim: ft=vim

Execute(String);
Assert object#contains('this', 'this is a string')
Assert object#contains('is', 'this is a string')
Assert object#contains('a', 'this is a string')
Assert object#contains('string', 'this is a string')
Assert !object#contains('that', 'this is a string')


Execute(Corner case: empty string);
Assert object#contains('', 'haystack')
Assert object#contains('', '')
Assert !object#contains('needle', '')


Execute(List);
let haystack = range(10)
for needle in haystack
  Assert object#contains(needle, haystack)
endfor

Assert !object#contains(-1, haystack)
Assert !object#contains(10, haystack)


Execute(Dict);
let haystack = {
      \ 'Germany': 'Berlin',
      \ 'United State': 'Hashington DC',
      \ 'England': 'London',
      \ 'France': 'Paris',
      \ 'Russia': 'Moscow',
      \}

for x in keys(haystack)
  Assert object#contains(x, haystack)
endfor

Assert !object#contains('NoWhere', haystack)


Execute(User-defined __contains__);
let X = object#class('X')
function! X.__contains__(Key)
  return 1
endfunction

let x = object#new(X)
for i in range(10)
  Assert object#contains(i, x)
endfor


Execute(Throw TypeError when arg is not iterable);
let input = [ function('tr'), 1 ]
for X in input
  AssertThrows call object#contains(1, g:X)
  Assert g:vader_exception =~# 'TypeError'
endfor
