" MIT License
" 
" Copyright (c) 2018 cgsdfc
" 
" Permission is hereby granted, free of charge, to any person obtaining a copy
" of this software and associated documentation files (the "Software"), to deal
" in the Software without restriction, including without limitation the rights
" to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
" copies of the Software, and to permit persons to whom the Software is
" furnished to do so, subject to the following conditions:
" 
" The above copyright notice and this permission notice shall be included in all
" copies or substantial portions of the Software.
" 
" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
" IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
" FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
" AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
" LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
" OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
" SOFTWARE.

" vim: ft=vim
" Test len()

Execute(Use __len__() if available);
let cls = {}
function! cls.__len__()
  return 12
endfunction

AssertEqual 12, object#len(cls)


Execute(Use len() of Vim if obj is a Collection or String);
let input = [
      \ range(10),
      \ '123',
      \ { 'a': 1, 'b': 2, 'c': 3},
      \ ]

for x in input
  AssertEqual len(x), object#len(x)
endfor


Execute(Throw TypeError if the len of obj cannot be determined);
let input = [
      \ 1,
      \ function('empty'),
      \ ]

if object#util#has_special_variables()
  call extend(input, [v:false, v:true, v:none, v:null,])
endif

if has('float')
  call add(input, 1.0)
endif

for X in input
  AssertThrows call object#len(g:X)
  Log g:vader_exception
  Assert g:vader_exception =~# 'TypeError'
endfor


Execute(Throw WrongType if __len__() returns non-number);
let cls = {}
function! cls.__len__()
  return 'bad'
endfunction

AssertThrows call object#len(g:cls)
Assert g:vader_exception =~# 'WrongType'
