" MIT License
" 
" Copyright (c) 2018 cgsdfc
" 
" Permission is hereby granted, free of charge, to any person obtaining a copy
" of this software and associated documentation files (the "Software"), to deal
" in the Software without restriction, including without limitation the rights
" to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
" copies of the Software, and to permit persons to whom the Software is
" furnished to do so, subject to the following conditions:
" 
" The above copyright notice and this permission notice shall be included in all
" copies or substantial portions of the Software.
" 
" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
" IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
" FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
" AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
" LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
" OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
" SOFTWARE.

" vim: ft=vim

Before;
" Create a customized exception.
let Exception = object#except#Exception_()
call object#class('MyError', Exception, g:)

Execute(No args: reraise);
function! TestReraise()
  try
    throw 'Exception'
  catch
    call object#raise()
  endtry
endfunction

AssertThrows call TestReraise()
Assert g:vader_exception =~# 'Exception'

Execute(No args, no pending: RuntimeError);
AssertThrows call object#raise()
Assert g:vader_exception =~# 'RuntimeError'
Log g:vader_exception


Execute(Only one arg: pure error name);
AssertThrows call object#raise(g:MyError)
Log g:vader_exception
Assert g:vader_exception =~# 'MyError'


Execute(Throw TypeError if !issubclass(except, BaseException));
let bad = [
      \ 1,
      \ 'Exception',
      \ object#class('X'),
      \]

for x in bad
  AssertThrows call object#raise(g:x)
  Assert g:vader_exception =~# 'TypeError'
endfor


Execute(Two args: error name with message);
AssertThrows call object#raise(g:MyError, 'Ops')
Log g:vader_exception
Assert g:vader_exception =~# 'MyError: Ops'

Execute(More than 2 args: formatted error message);
AssertThrows call object#raise(g:MyError, 'Invalid address %x', 0xffffffff)
Log g:vader_exception
Assert g:vader_exception =~# 'MyError:.*'

