" vim:ft=vim
Before;
let object = object#object_()
let type = object#type_()
let None = object#None()

Execute(class() throws TypeError with argc > 2);
AssertThrows call object#class('Boy', g:object, 'hey')
Assert g:vader_exception =~# 'TypeError'
Log g:vader_exception

Execute(class() throws ValueError if name is not an iden);
AssertThrows call object#class('$var')
Assert g:vader_exception =~# 'ValueError'
Log g:vader_exception

Execute(class() throws WrongType if name is not a String);
AssertThrows call object#class(1)
Assert g:vader_exception =~# 'WrongType'
Log g:vader_exception

Execute(class() throws TypeError if bases is neither a List nor a class);
AssertThrows call object#class('Man', 2)
Assert g:vader_exception =~# 'TypeError'
Log g:vader_exception

Execute(class() throws TypeError if bases is not valid classes);
for x in [ {}, [1, 2, 3], ['a', v:none, v:false] ]
  AssertThrows call object#class('Man', g:x)
  Assert g:vader_exception =~# 'TypeError'
  Log g:vader_exception
endfor

Execute(class() can detect duplicate base classes and throws TypeError);
for x in [ [object, object], [type, type] ]
  AssertThrows call object#class('Man', g:x)
  Assert g:vader_exception =~# 'TypeError'
  Log g:vader_exception
endfor

Execute(When there is no bases given or an empty base list, class() sets base to object);

for x in [ "object#class('Man')",  "object#class('Man', [])" ]
  let cls = eval(x)
  Assert cls.__base__ is# object
  Assert cls.__bases__ ==# [object]
endfor
