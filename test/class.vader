" vim:ft=vim
Before;
let object = object#object_()
let type = object#type_()
let None = object#None()
let X = object#class('X')

Execute(class() throws TypeError with argc > 2);
AssertThrows call object#class('Boy', g:object, 'hey')
Assert g:vader_exception =~# 'TypeError'
Log g:vader_exception

Execute(class() throws ValueError if name is not an identifier);
AssertThrows call object#class('$var')
Assert g:vader_exception =~# 'ValueError'
Log g:vader_exception

Execute(class() throws WrongType if name is not a String);
AssertThrows call object#class(1)
Assert g:vader_exception =~# 'WrongType'
Log g:vader_exception

Execute(class() throws TypeError if bases is neither a List nor a class);
AssertThrows call object#class('Man', 2)
Assert g:vader_exception =~# 'TypeError'
Log g:vader_exception

Execute(class() throws TypeError if bases is not valid classes);
for x in [ {}, [1, 2, 3], ['a', v:none, v:false] ]
  AssertThrows call object#class('Man', g:x)
  Assert g:vader_exception =~# 'TypeError'
  Log g:vader_exception
endfor

Execute(class() can detect duplicate base classes and throws TypeError);
for x in [ [object, object], [type, type] ]
  AssertThrows call object#class('Man', g:x)
  Assert g:vader_exception =~# 'TypeError'
  Log g:vader_exception
endfor

"
" Test inheritance in terms of subclass relationship
" and simple builtin methods.
"

Execute(When there is no bases given or an empty base list, class() sets base to object);
for x in [ "object#class('Man')",  "object#class('Man', [])" ]
  let cls = eval(x)
  Assert cls.__base__ is# object
  Assert cls.__bases__ ==# [object]
endfor

Execute(New cls should work with repr());
AssertEqual object#repr(X), "<type 'X'>"

Execute(New cls has expected instance relationship);
Assert X.__class__ is# type
Assert X.__name__ is# 'X'

Execute(class() can handle one single base);
let Y = object#class('Y', X)
Assert Y.__base__ is# X
Assert Y.__bases__ ==# [X]

Execute(class() can handle a List of bases);
let bases = map([ 'A', 'B', 'C', ], 'object#class(v:val)')
let D = object#class('D', bases)
Assert D.__base__ is# bases[0]
Assert D.__bases__ is# bases

let E = object#class('E', [D])
Assert E.__base__ is# D
Assert E.__bases__ ==# [D]

"
" Test new() 
"

Execute(New cls can be instantiated with new() with default __init__ and __repr__);
let x = object#new(X)
Assert x.__class__ is# X
AssertEqual object#repr(x), "<'X' object>"
Log object#dir(x)
Log object#dir(X)
Log object#repr(x)
Log object#repr(X)

Execute(new() can hook into __init__ and __repr__);
function! X.__init__(name, size)
  let name = maktaba#ensure#IsString(a:name)
  let size = maktaba#ensure#IsNumber(a:size)
  let self.name = name
  let self.size = size
  Log '__init__ called'
endfunction

function! X.__repr__()
  return printf('X(name=%s, size=%d)', self.name, self.size)
endfunction

let x = object#new(X, 'var', 4)
AssertEqual x.name, 'var'
AssertEqual x.size, 4
Assert object#repr(x) is# 'X(name=var, size=4)'
Log object#repr(x)

AssertThrows call object#new(g:X, 1, 4)
Assert g:vader_exception =~# 'WrongType'

"
" Test methods extraction
"

Execute(is_method() throws ValueError if the method name isn't identifier);

Execute(methods() extracts correct methods);
